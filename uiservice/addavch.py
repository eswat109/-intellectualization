# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'addavch.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QHeaderView
from dbserver.charmanager import CharManager
from dbserver.avtomanager import AvtoManager
from dbserver.avtocharmanager import AvtoCharManager
from dbserver.dbworker import DBWorker

class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        self.dbwCM = DBWorker()
        self.dbwAM = DBWorker()
        self.dbwACM = DBWorker()
        self.manC = CharManager(self.dbwCM)
        self.manA = AvtoManager(self.dbwAM)
        self.manAC = AvtoCharManager(self.dbwACM)
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(500, 500)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_Char = QtWidgets.QLabel(self.centralwidget)
        self.label_Char.setGeometry(QtCore.QRect(30, 20, 131, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_Char.setFont(font)
        self.label_Char.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_Char.setObjectName("label_Char")
        self.comboBoxChar = QtWidgets.QComboBox(self.centralwidget)
        self.comboBoxChar.setGeometry(QtCore.QRect(180, 20, 221, 22))
        self.comboBoxChar.setObjectName("comboBoxChar")
        self.label_Type = QtWidgets.QLabel(self.centralwidget)
        self.label_Type.setGeometry(QtCore.QRect(10, 60, 151, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_Type.setFont(font)
        self.label_Type.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_Type.setObjectName("label_Type")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(180, 60, 291, 321))
        self.tableWidget.setObjectName("tableWidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(380, 400, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(30, 400, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton.setHidden(True)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 500, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Связи"))
        self.label_Char.setText(_translate("MainWindow", "Номер  авто"))
        self.label_Type.setText(_translate("MainWindow", "Текущие признаки"))
        self.pushButton.setText(_translate("MainWindow", "Сохранить"))
        self.pushButton_2.setText(_translate("MainWindow", "Назад"))

class AddAvtoCharWindow(QtWidgets.QMainWindow, Ui_MainWindow):

    def setComboBox(self):
        #self.dbwAM.openCon()
        self.avtodata = self.manA.findall()
        #self.dbwAM.closeCon()
        self.ids = [d['id'] for d in self.avtodata]
        self.ids.insert(0, '')
        for i in self.ids:
            self.comboBoxChar.addItem(str(i))

    def changedComboBox(self):
        ind = self.comboBoxChar.currentIndex()
        if ind:
            self.tableWidget.setEnabled(True)
            self.pushButton.setEnabled(True)
            #self.dbwAM.openCon()
            self.curavtoobj = self.manA.findbyid(int(self.ids[ind]))
            #self.dbwAM.closeCon()
        else:
            self.tableWidget.setEnabled(False)
            self.pushButton.setEnabled(False)
            self.curavtoobj = None
        self.setTable()

    def chbIsChanged(self, row):
        if not self.curavtoobj:
            return
        chb = self.sender()
        row_ = chb.index
        ch_id = self.chardata[row_]['id']
        av_id = self.curavtoobj['id']
        if chb.isChecked():
            #self.dbwAC.openCon()
            self.manAC.addbyac(int(av_id), int(ch_id))
            #self.dbwAC.closeCon()
        else:
            #self.dbwAC.openCon()
            self.manAC.deletebyac(int(av_id), int(ch_id))
            #self.dbwAC.closeCon()

    def setTable(self):
        self.chardata = self.manC.findall()
        titles = self.manC.gettitles()
        titles_ = ['id', 'Имя', 'Тип', 'Значения', 'Добавлено']
        self.tableWidget.setColumnCount(len(titles_))
        self.tableWidget.setRowCount(len(self.chardata))
        self.tableWidget.setHorizontalHeaderLabels(titles_)
        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tableWidget.setColumnHidden(0, True)
        self.tableWidget.setColumnHidden(2, True)
        self.tableWidget.setColumnHidden(3, True)
        if not self.curavtoobj:
            return
        for i, d in enumerate(self.chardata):
            for j in range(len(titles)):
                value = str(d[titles[j]])
                item = QtWidgets.QTableWidgetItem(value)
                item.setTextAlignment(Qt.AlignCenter)
                item.setFlags(item.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                self.tableWidget.setItem(i, j, item)
            checkBox = QtWidgets.QCheckBox()
            checkBox.index = i
            avto_id = self.curavtoobj['id']
            char_id = d['id']
            resreq = self.manAC.findbyavtochar(int(avto_id), int(char_id))
            if resreq:
                checkBox.toggle()
            checkBox.stateChanged.connect(lambda: self.chbIsChanged(int(i)))
            self.tableWidget.setCellWidget(i, len(titles_) - 1, checkBox)

    def returnM(self):
        self.close()
        if self.parent():
            self.parent().show()

    def setConnects(self):
        self.comboBoxChar.currentIndexChanged.connect(self.changedComboBox)
        self.pushButton_2.clicked.connect(self.returnM)

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.setConnects()
        self.setComboBox()


if __name__ == "__main__":
    try:
        import sys
        app = QtWidgets.QApplication(sys.argv)
        #MainWindow = QtWidgets.QMainWindow()
        #ui = Ui_MainWindow()
        #ui.setupUi(MainWindow)
        addcharwin = AddAvtoCharWindow()
        addcharwin.show()
        sys.exit(app.exec_())
    except Exception as e:
        print(e)
